package com.aemtools.sync.settings.gui

/**
 * @author Dmytro Liakhov
 */


import com.intellij.uiDesigner.core.GridConstraints
import com.intellij.uiDesigner.core.GridLayoutManager
import com.intellij.uiDesigner.core.Spacer
import com.jgoodies.forms.layout.CellConstraints
import com.jgoodies.forms.layout.FormLayout
import java.awt.Insets
import javax.swing.BorderFactory
import javax.swing.JCheckBox
import javax.swing.JLabel
import javax.swing.JPanel
import javax.swing.JTextArea
import javax.swing.JTextField


/**
 * @author Dmytro Liakhov
 */
class AEMToolsConfigurationGUI {
  private var enableAEMSyncingFilesCheckBox: JCheckBox? = null
  private var urlInputText: JTextField? = null
  private var loginTextInput: JTextArea? = null
  private var passwordTextInput: JTextArea? = null
  private var rootPanel: JPanel? = null

  fun getRootPanel(): JPanel? = rootPanel

  fun isAEMSyncEnabled(): Boolean = enableAEMSyncingFilesCheckBox?.isSelected() ?: false

  val login: String
    get() = loginTextInput?.text ?: ""

  val password: String
    get() = passwordTextInput?.text ?: ""

  val urlInstance: String
    get() = urlInputText?.text ?: ""

  val enabled: Boolean
    get() = enableAEMSyncingFilesCheckBox?.isSelected() ?: false

  init {
    // GUI initializer generated by IntelliJ IDEA GUI Designer
    // >>> IMPORTANT!! <<<
    // DO NOT EDIT OR ADD ANY CODE HERE!
    `$$$setupUI$$$`()
  }

  /**
   * Method generated by IntelliJ IDEA GUI Designer
   * >>> IMPORTANT!! <<<
   * DO NOT edit this method OR call it in your code!
   *
   * @noinspection ALL
   */
  private fun `$$$setupUI$$$`() {
    rootPanel = JPanel()
    rootPanel?.setLayout(GridLayoutManager(2, 3, Insets(0, 0, 0, 0), -1, -1))
    enableAEMSyncingFilesCheckBox = JCheckBox()
    enableAEMSyncingFilesCheckBox?.setText("Enable AEM syncing files")
    rootPanel?.add(enableAEMSyncingFilesCheckBox, GridConstraints(0, 0, 1, 2, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_CAN_SHRINK or GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false))
    val spacer1 = Spacer()
    rootPanel?.add(spacer1, GridConstraints(0, 2, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW, 1, null, null, null, 0, false))
    val panel1 = JPanel()
    panel1.layout = GridLayoutManager(2, 1, Insets(0, 0, 0, 0), -1, -1)
    rootPanel?.add(panel1, GridConstraints(1, 0, 1, 3, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK or GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK or GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false))
    panel1.border = BorderFactory.createTitledBorder("Configurations")
    val panel2 = JPanel()
    panel2.layout = FormLayout("fill:d:grow", "center:d:grow,top:4dlu:noGrow,center:max(d;4px):noGrow,top:4dlu:noGrow,center:max(d;4px):noGrow,top:4dlu:noGrow,center:max(d;4px):noGrow,top:4dlu:noGrow,center:d:grow")
    panel1.add(panel2, GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK or GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK or GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false))
    panel2.border = BorderFactory.createTitledBorder("URL Instance")
    urlInputText = JTextField()
    urlInputText?.setText("http://localhost:4502")
    val cc = CellConstraints()
    panel2.add(urlInputText, cc.xy(1, 3, CellConstraints.FILL, CellConstraints.DEFAULT))
    val panel3 = JPanel()
    panel3.layout = FormLayout("fill:d:grow", "center:d:grow,top:4dlu:noGrow,center:d:grow")
    panel2.add(panel3, cc.xy(1, 5))
    panel3.border = BorderFactory.createTitledBorder("Login")
    loginTextInput = JTextArea()
    loginTextInput?.setText("admin")
    panel3.add(loginTextInput, cc.xy(1, 3, CellConstraints.FILL, CellConstraints.FILL))
    val label1 = JLabel()
    label1.text = "Password"
    panel2.add(label1, cc.xy(1, 7))
    passwordTextInput = JTextArea()
    passwordTextInput?.setText("admin")
    panel2.add(passwordTextInput, cc.xy(1, 9, CellConstraints.FILL, CellConstraints.FILL))
    val spacer2 = Spacer()
    panel1.add(spacer2, GridConstraints(1, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_VERTICAL, 1, GridConstraints.SIZEPOLICY_WANT_GROW, null, null, null, 0, false))
  }

}
